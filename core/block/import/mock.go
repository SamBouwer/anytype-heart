// Code generated by MockGen. DO NOT EDIT.
// Source: core/block/import/types.go

// Package mock_importer is a generated GoMock package.
package importer

import (
	reflect "reflect"

	types "github.com/gogo/protobuf/types"
	gomock "github.com/golang/mock/gomock"

	app "github.com/anyproto/anytype-heart/app"
	"github.com/anyproto/anytype-heart/core/block/import/converter"
	"github.com/anyproto/anytype-heart/core/block/process"
	session "github.com/anyproto/anytype-heart/core/session"
	pb "github.com/anyproto/anytype-heart/pb"
	"github.com/anyproto/anytype-heart/pkg/lib/core/smartblock"
	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockImporter is a mock of Importer interface.
type MockImporter struct {
	ctrl     *gomock.Controller
	recorder *MockImporterMockRecorder
}

// MockImporterMockRecorder is the mock recorder for MockImporter.
type MockImporterMockRecorder struct {
	mock *MockImporter
}

// NewMockImporter creates a new mock instance.
func NewMockImporter(ctrl *gomock.Controller) *MockImporter {
	mock := &MockImporter{ctrl: ctrl}
	mock.recorder = &MockImporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImporter) EXPECT() *MockImporterMockRecorder {
	return m.recorder
}

// Import mocks base method.
func (m *MockImporter) Import(ctx *session.Context, req *pb.RpcObjectImportRequest) *types.Struct {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", ctx, req)
	ret0, _ := ret[0].(*types.Struct)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockImporterMockRecorder) Import(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockImporter)(nil).Import), ctx, req)
}

// Init mocks base method.
func (m *MockImporter) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockImporterMockRecorder) Init(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockImporter)(nil).Init), a)
}

// Name mocks base method.
func (m *MockImporter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockImporterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockImporter)(nil).Name))
}

// Register mocks base method.
func (m *MockImporter) Register(c converter.Converter) Importer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", c)
	ret0, _ := ret[0].(Importer)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockImporterMockRecorder) Register(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockImporter)(nil).Register), c)
}

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// GetSnapshots mocks base method.
func (m *MockConverter) GetSnapshots(req *pb.RpcObjectImportRequest, progress *process.Progress) (*converter.Response, converter.ConvertError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshots", req, progress)
	ret0, _ := ret[0].(*converter.Response)
	ret1, _ := ret[1].(converter.ConvertError)
	return ret0, ret1
}

// GetSnapshots indicates an expected call of GetSnapshots.
func (mr *MockConverterMockRecorder) GetSnapshots(req interface{}, progress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshots", reflect.TypeOf((*MockConverter)(nil).GetSnapshots), req, progress)
}

// Name mocks base method.
func (m *MockConverter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetImage mocks base method.
func (m *MockConverter) GetImage() ([]byte, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetImage indicates an expected call of GetImage.
func (mr *MockConverterMockRecorder) GetImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockConverter)(nil).GetImage))
}

// Name indicates an expected call of Name.
func (mr *MockConverterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConverter)(nil).Name))
}

// MockCreator is a mock of Creator interface.
type MockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorMockRecorder
}

// MockCreatorMockRecorder is the mock recorder for MockCreator.
type MockCreatorMockRecorder struct {
	mock *MockCreator
}

// NewMockCreator creates a new mock instance.
func NewMockCreator(ctrl *gomock.Controller) *MockCreator {
	mock := &MockCreator{ctrl: ctrl}
	mock.recorder = &MockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreator) EXPECT() *MockCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreator) Create(ctx *session.Context, cs *model.SmartBlockSnapshotBase, relations []*converter.Relation, pageID string, sbType smartblock.SmartBlockType, updateExisting bool) (*types.Struct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, cs, pageID, sbType, updateExisting)
	ret0, _ := ret[0].(*types.Struct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreatorMockRecorder) Create(ctx, cs, relations, pageID, sbType, updateExisting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreator)(nil).Create), ctx, cs, pageID, sbType, updateExisting)
}

// MockError is a mock of Error interface.
type MockError struct {
	ctrl     *gomock.Controller
	recorder *MockErrorMockRecorder
}

// MockErrorMockRecorder is the mock recorder for MockError.
type MockErrorMockRecorder struct {
	mock *MockError
}

// NewMockError creates a new mock instance.
func NewMockError(ctrl *gomock.Controller) *MockError {
	mock := &MockError{ctrl: ctrl}
	mock.recorder = &MockErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockError) EXPECT() *MockErrorMockRecorder {
	return m.recorder
}

// ConvertToImportMap mocks base method.
func (m *MockError) ConvertToImportMap(importErrors map[string]error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConvertToImportMap", importErrors)
}

// ConvertToImportMap indicates an expected call of ConvertToImportMap.
func (mr *MockErrorMockRecorder) ConvertToImportMap(importErrors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToImportMap", reflect.TypeOf((*MockError)(nil).ConvertToImportMap), importErrors)
}
